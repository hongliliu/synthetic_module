"""
Script to simulate ALMA observation.
Visibilities are generated by simobserve and 
the imaging is done by tclean.

Some of the useful functions from toolkit.py
have been re-written here because of the 
incompatibility between the Python version
in CASA (v2.7) and locally (v3.8).
"""

import os, time, shutil
from datetime import datetime as date

# Time taken by the whole script
the_whole_time = time.time()
pwd = os.getcwd()
today = f'{date.now().year}/{date.now().month}/{date.now().month}'

class color:
    NC = '\033[0m'
    BOLD = '\033[1m'

def elapsed_time(runtime, func_name):
	print(f"{color.BOLD}[{func_name}] oh2dp done. Elapsed time: {str(time.strftime("%H:%M:%S", time.gmtime(runtime)))}{color.NC}\n")

def getChans(inwidth, width, verbose=True):
	"""
	Define the linewidth for each core and 
	timestep, as taken from the noiseless 
	mom0.
	"""	

	if 'run_0000' in pwd:
		chans = '130~200'		
	elif 'run_0011' in pwd:
		chans = '130~200'		
	elif 'run_0023' in pwd:
		chans = '130~200'		
	elif 'run_0038' in pwd:
		chans = '110~210'		
	elif 'run_0053' in pwd:
		chans = '100~240'		
	elif 'run_0068' in pwd:
		chans = '090~245'	
	elif 'run_0083' in pwd:
		chans = '088~250'		
	elif 'run_0099' in pwd:
		chans = '075~252'		
	elif 'run_0114' in pwd:
		chans = '060~265'		
	elif 'run_0129' in pwd:
		chans = '050~300'		
	elif 'run_0145' in pwd:
		chans = '050~280'	

	# rescale chans if a different chan width was given to tclen
	chan_ratio = float(inwidth.split('km/s')[0]) / float(width.split('km/s')[0])
	chan_1 = int(int(chans.split('~')[0]) * chan_ratio)
	chan_2 = int(int(chans.split('~')[1]) * chan_ratio)

	chans = str(chan_1)+'~'+str(chan_2)

	if verbose:
		print(color.BOLD+"chans: "+str(chans)+color.NC)

	return chans		


def computeRMS(imagename, region=None, chans='4~6', verbose=True):

	if region == None:
		# Image size 
		shape = imhead(imagename, mode='get', hdkey='shape')
		naxis = shape[0]
		nchan = shape[2]

		regions = ['','','','']

		# By default, all regions are averaged over all channels

		# Left upright rectangle
		regions[0] = 'box[[0pix,0pix],['+str(naxis/10)+'pix,'+str(naxis-2)+'pix]]'
		# Bottom horizontal rectangle
		regions[1] = 'box[[0pix,0pix],['+str(naxis-2)+'pix,'+str(naxis/10)+'pix]]'
		# Right upright rectangle
		regions[2] = 'box[['+str(naxis*0.9)+'pix,'+str(0)+'pix],['+str(naxis-2)+'pix,'+str(naxis-2)+'pix]]'
		# Top horizontal rectangle
		regions[3] = 'box[['+str(0)+'pix,'+str(naxis*0.9)+'pix],['+str(naxis-2)+'pix,'+str(naxis-2)+'pix]]'


		rms_r = []
		for i,r in enumerate(regions):
			rms_r.append(imstat(imagename, region=regions[i], chans=chans)['rms'])

		rms = np.mean(rms_r)
	else:
		rms = imstat(imagename, region=region)['mean']

	if verbose:
		print(color.BOLD+ 'cube rms: '+str(rms*1e3)+' mJy/beam' +color.NC)	

	return rms

def get_cell_size(path):
	if '1kpc' in path:
		return '0.08055913547009376arcsec' # 1kpc
	elif '2kpc' in path:
		return '0.04028609497013568arcsec' # 2kpc
	elif '3kpc' in path:
		return '0.02685594599337899arcsec' # 3kpc
	elif '4kpc' in path:
		return '0.020146312160511264arcsec' # 4kpc
	elif '5kpc' in path:
		return '0.016111827094018750arcsec' # 5kpc
	elif '6kpc' in path:
		return '0.013430874773674188arcsec' # 6kpc
	elif '7kpc' in path:
		return '0.011509513521329125arcsec' # 7kpc

#####################################################
### MAIN
#####################################################


# Turn on/off options
RunSimobserve = True
tCLEAN = True
ACA = True
NoisyImage = True
CreateMom0 = True


### SIMOBSERVE PARAMETERS
t_int = '12h'

if RunSimobserve:
	print("{}[simobserve] Runnning for line oh2dp... {}".format(color.BOLD,color.NC))
	print("{}[simobserve] Observation time: {} {}".format(color.BOLD,t_int,color.NC))
	default(simobserve)

	start_time = time.time()
	simobserve(
		project = "oh2dp_alma",
		skymodel = "oh2dp_intensity.fits",
		incell= "",
		mapsize = '6arcsec' if NoisyImage else '',
		integration = "100s", # Time per scan
		totaltime =  t_int, 	# This is the real time on-source
		indirection = "J2000 19h00m00 -40d00m00",
		direction = "",
		inbright = "",	
		maptype = "ALMA",
		refdate = today,
		hourangle = "transit",
		thermalnoise = "tsys-manual",
		t_sky = 114.340,
		tau0 = 0.579,
		user_pwv = 0.658,
		t_ground = 269.0,
		graphics = "both",
		overwrite = True,
		verbose = False,
		incenter = "372.421385GHz",
		antennalist = "aca.cycle7.cfg" if ACA else "alma.cycle7.1.cfg",
		seed = 12
	)

	elapsed_time(time.time() - start_time, 'simobserve')

	start_time = time.time()
	simobserve(
		project = "oh2dp_alma",
		skymodel = "oh2dp_intensity.fits",
		incell= "",
		mapsize = '6arcsec' if NoisyImage else '',
		integration = "100s", # Time per scan
		totaltime =  t_int, 	# This is the real time on-source
		indirection = "J2000 19h00m00 -40d00m00",
		direction = "",
		inbright = "",	
		maptype = "ALMA",
		refdate = today,
		hourangle = "transit",
		thermalnoise = "tsys-manual",
		t_sky = 114.340,
		tau0 = 0.579,
		user_pwv = 0.658,
		t_ground = 269.0,
		graphics = "both",
		overwrite = True,
		verbose = False,
		incenter = "372.421385GHz",
		antennalist = "alma.cycle7.1.cfg",
		seed = 12
	)

	elapsed_time(time.time() - start_time, 'simobserve')

	if ACA:
		print("{}[concat] concating ACA and ALMA visbilities... {}\n".format(color.BOLD,color.NC))
		if NoisyImage:
			concat(['oh2dp_alma/oh2dp_alma.alma.cycle7.1.noisy.ms','oh2dp_alma/oh2dp_alma.aca.cycle7.noisy.ms'], 'oh2dp_alma/alma+aca.noisy.ms')
		else:
			concat(['oh2dp_alma/oh2dp_alma.alma.cycle7.1.ms','oh2dp_alma/oh2dp_alma.aca.cycle7.ms'], 'oh2dp_alma/alma+aca.ms')


### SIMANALYZE PARAMETERS

# Run only if turned on
if tCLEAN:
	print("{}[tclean] Runnning for line oh2dp... {}\n".format(color.BOLD,color.NC))
	default(tclean)

	if ACA:
		vis = "oh2dp_alma/alma+aca.noisy.ms" if NoisyImage else "oh2dp_alma/alma+aca.ms"
		imagename = "oh2dp_alma/alma+aca.noisy" if NoisyImage else "oh2dp_alma/alma+aca"
	else:	
		vis = "oh2dp_alma/oh2dp_alma.alma.cycle7.1.noisy.ms" if NoisyImage else "oh2dp_alma/oh2dp_alma.alma.cycle7.1.ms"
		imagename = "oh2dp_alma/oh2dp_alma.alma.cycle7.1.noisy" if NoisyImage else "oh2dp_alma/oh2dp_alma.alma.cycle7.1"

		print('cellsize: {}'.format(get_cell_size(pwd)))
	start_time = time.time()
	tclean(
		vis = vis,
		imagename = imagename,
		phasecenter = "J2000 19h00m00 -40d00m00",
		imsize = 512,
		cell = get_cell_size(pwd),
		niter = 20000,
		threshold = '0.1mJy/beam',
		weighting = 'natural',
		gridder = "standard" if NoisyImage else "mosaic",
		specmode = 'cube',
		deconvolver = 'hogbom',
		restoringbeam = "common",
		reffreq = '372.421385GHz',
		restfreq = '372.421385GHz',
		width = '1km/s' if NoisyImage else '0.0300308km/s',
		# width = '0.300308km/s' if NoisyImage else '0.0300308km/s',
		# width = '0.0900924km/s' if NoisyImage else '0.0300308km/s',
		nchan = -1,
		mask = 'masking_region.crtf',
		interactive = False,
		pbcor = True,
		verbose = False
	)

	elapsed_time(time.time() - start_time, 'tclean')


	# Hereafter is just crap to take care of filenames and creating the mom0 after all

	if ACA:
		finalimage = "oh2dp_alma/alma+aca.noisy.image" 	 				if NoisyImage else "oh2dp_alma/alma+aca.image"
		fitsimage_alma = 'oh2dp_intensity_alma+aca_noisy.fits' 	 		if NoisyImage else 'oh2dp_intensity_alma+aca.fits'
		fitsimage_alma_mom0 = 'oh2dp_intensity_alma+aca_mom0_noisy.fits'if NoisyImage else 'oh2dp_intensity_alma+aca_mom0.fits'	
	else:
		finalimage = "oh2dp_alma/oh2dp_alma.alma.cycle7.1.noisy.image" 	if NoisyImage else "oh2dp_alma/oh2dp_alma.alma.cycle7.1.image"
		fitsimage_alma = 'oh2dp_intensity_alma_noisy.fits' 	 			if NoisyImage else 'oh2dp_intensity_alma.fits'
		fitsimage_alma_mom0 = 'oh2dp_intensity_alma_mom0_noisy.fits'	if NoisyImage else 'oh2dp_intensity_alma_mom0.fits'


	# Obtain the rms and the selected channels for collapse of the cube
	rms = computeRMS(finalimage)
	Max = imstat(finalimage, region='masking_region.crtf')['max']
	SNR = Max / rms
	print("max: {} mJy/beam\nSNR: {}".format(Max*1e3,SNR))
	try:
		chans = getChans(inwidth, width, verbose=True)
	except:
		chans=None

	# Export data cube to fits
	print("{}[alma_simulation] Exporting into fits file...{}\n".format(color.BOLD,color.NC))
	imhead(finalimage, mode='add', hdkey='OBSTIME', hdvalue=t_int)
	imhead(finalimage, mode='add', hdkey='RMS', hdvalue=str(rms))
	imhead(finalimage, mode='add', hdkey='SNR', hdvalue=str(SNR))
	exportfits(imagename=finalimage, fitsimage=fitsimage_alma, velocity=True, overwrite=True, dropstokes=True)

	# Collapse cube into moment 0
	print("{}[alma_simulation] Collapsing oh2dp alma data cube into fits moment 0...{}\n".format(color.BOLD,color.NC))
	if NoisyImage:
		immoments(finalimage, outfile=fitsimage_alma_mom0[:-5], includepix=[rms,5e3*rms], chans=chans)
	else:
		immoments(finalimage, outfile=fitsimage_alma_mom0[:-5], includepix=[0,1e6], chans=chans)

	# Export the moment 0 into fits file
	exportfits(imagename=fitsimage_alma_mom0[:-5], fitsimage=fitsimage_alma_mom0, velocity=True, overwrite=True, dropstokes=True)
	os.system('rm -rf {}'.format(fitsimage_alma_mom0[:-5]))


# If neither simobserve nor tclean was selected, exit.
if not RunSimobserve and not tCLEAN:
	print("{}[alma_simulation] No simulation mode was selected!{}".format(color.BOLD,color.NC))

# Print the total runtime
the_whole_elapsed_time = time.time() - the_whole_time
print("{}\n[alma_simulation] ALMA simulation finished succesfully.{}".format(color.BOLD,color.NC))
print("{}Total elapsed time: {}\n".format(color.BOLD,str(time.strftime("%H:%M:%S", time.gmtime(the_whole_elapsed_time))),color.NC))
